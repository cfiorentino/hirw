package com.hirw.maxcloseprice;

/**
 * MaxClosePriceReducer.java
 * www.hadoopinrealworld.com
 * This is a Reduce program to calculate Max Close Price from stock dataset using MapReduce
 */
 import java.io.IOException;

 import org.apache.hadoop.io.FloatWritable;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapreduce.Reducer;

 // the number of reducers could be zero or more
 // zero when we don't need to reduce anything
 // in case we need to apply a reduce job, the number of reducer
 // will be the number of keys generated by the shuffle phase
 // (remeber in the shuffle phase the <key,value>s generated by the
 // mappers, will be aggregated by key, and the output will be <key,List<value>>)
 
 // in order to apply a reducer job, it has to extend the "Reducer" class
 // defined in the "org.apache.hadoop.mapreduce.Reducer" jar
 												// input key  input value    output key  output value
 public class MaxClosePriceReducer extends Reducer<Text,      FloatWritable, Text,       FloatWritable> {

	 @Override
 					 // input key  input values
	 public void reduce(Text key,  Iterable<FloatWritable> values, Context context)
			 throws IOException, InterruptedException {

		 float maxClosePrice = Float.MIN_VALUE;
		 
		 //Iterate all closing prices and calculate maximum
		 for (FloatWritable value : values) {
			 maxClosePrice = Math.max(maxClosePrice, value.get());
		 }
		 
		 //Write output
		 // pass the result to Hadoop
		 // after have iterated through values, and get the maximum
		 context.write(key, new FloatWritable(maxClosePrice));
	 }
 }
